#include<iostream>
#include<vector>

#include "include/datamodel.hpp"

using namespace std;

void DataModel::createDataModel(DataModel *dm, vector<string> row) {
    dm->flowID = row[0];
    dm->sourceIP = row[1];
    dm->sourcePort = row[2];
    dm->destinationIP = row[3];
    dm->destinationPort = row[4];
    dm->protocol = stoi(row[5]);
    dm->timestamp = row[6];
    dm->flowDuration = stoi(row[7]);
    dm->totalFwdPackets = stoi(row[8]);
    dm->totalBackwardPackets = stoi(row[9]);
    dm->totalLengthOfFwdPackets = stof(row[10]);
    dm->totalLengthOfBwdPackets = stof(row[11]);
    dm->fwdPacketLengthMax = stof(row[12]);
    dm->fwdPacketLengthMin = stof(row[13]);
    dm->fwdPacketLengthMean = stof(row[14]);
    dm->fwdPacketLengthStd = stof(row[15]);
    dm->bwdPacketLengthMax = stof(row[16]);
    dm->bwdPacketLengthMin = stof(row[17]);
    dm->bwdPacketLengthMean = stof(row[18]);
    dm->bwdPacketLengthStd = stof(row[19]);
    dm->flowBytes = stof(row[20]);
    dm->flowPackets = stof(row[21]);
    dm->flowIATMean = stof(row[22]);
    dm->flowIATStd = stof(row[23]);
    dm->flowIATMax = stof(row[24]);
    dm->flowIATMin = stof(row[25]);
    dm->fwdIATTotal = stof(row[26]);
    dm->fwdIATMean = stof(row[27]);
    dm->fwdIATStd = stof(row[28]);
    dm->fwdIATMax = stof(row[29]);
    dm->fwdIATMin = stof(row[30]);
    dm->bwdIATTotal = stof(row[31]);
    dm->bwdIATMean = stof(row[32]);
    dm->bwdIATStd = stof(row[33]);
    dm->bwdIATMax = stof(row[34]);
    dm->bwdIATMin = stof(row[35]);
    dm->fwdPSHFlags = stoi(row[36]);
    dm->bwdPSHFlags = stoi(row[37]);
    dm->fwdURGFlags = stoi(row[38]);
    dm->bwdURGFlags = stoi(row[39]);
    dm->fwdHeaderLength = stoi(row[40]);
    dm->bwdHeaderLength = stoi(row[41]);
    dm->fwdPackets = stof(row[42]);
    dm->bwdPackets = stof(row[43]);
    dm->minPacketLength = stof(row[44]);
    dm->maxPacketLength = stof(row[45]);
    dm->packetLengthMean = stof(row[46]);
    dm->packetLengthStd = stof(row[47]);
    dm->packetLengthVariance = stof(row[48]);
    dm->FINFlagCount = stoi(row[49]);
    dm->SYNFlagCount = stoi(row[50]);
    dm->RSTFlagCount = stoi(row[51]);
    dm->PSHFlagCount = stoi(row[52]);
    dm->ACKFlagCount = stoi(row[53]);
    dm->URGFlagCount = stoi(row[54]);
    dm->CWEFlagCount = stoi(row[55]);
    dm->ECEFlagCount = stoi(row[56]);
    dm->DownUpRatio = stof(row[57]);
    dm->averagePacketSize = stof(row[58]);
    dm->avgFwdSegmentSize = stof(row[59]);
    dm->avgBwdSegmentSize = stof(row[60]);
    dm->fwdHeaderLengths = stoi(row[61]);
    dm->fwdAvgBytesBulk = stoi(row[62]);
    dm->fwdAvgPacketsBulk = stoi(row[63]);
    dm->fwdAvgBulkRate = stoi(row[64]);
    dm->bwdAvgBytesBulk = stoi(row[65]);
    dm->bwdAvgPacketsBulk = stoi(row[66]);
    dm->bwdAvgBulkRate = stoi(row[67]);
    dm->subflowFwdPackets = stoi(row[68]);
    dm->subflowFwdBytes = stoi(row[69]);
    dm->subflowBwdPackets = stoi(row[70]);
    dm->subflowBwdBytes = stoi(row[71]);
    dm->init_Win_bytes_forward = stoi(row[72]);
    dm->init_Win_bytes_backward = stoi(row[73]);
    dm->act_data_pkt_fwd = stoi(row[74]);
    dm->min_seg_size_forward = stoi(row[75]);
    dm->activeMean = stof(row[76]);
    dm->activeStd = stof(row[77]);
    dm->activeMax = stof(row[78]);
    dm->activeMin = stof(row[79]);
    dm->idleMean = stof(row[80]);
    dm->idleStd = stof(row[81]);
    dm->idleMax = stof(row[82]);
    dm->idleMin = stof(row[83]);
    dm->label = (row[84] == "BENIGN") ? 0 : 1;
}